***************************************************************************************************
Pass by Reference: Give me the original copy(address), I edit it, and send it back
Pass by Value: Give me a copy of the address, I edit it, I do whatever I want with it
***************************************************************************************************

>> Pointers

The unary or monadic operator & gives the ``address of a variable''.

The indirection or dereference operator * gives the ``contents of an object pointed to by a pointer''.

To declare a pointer to a variable:

   int *pointer;

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    int  var = 20;   /* actual variable declaration */
    int  *ip;        /* pointer variable declaration */

    ip = &var;  /* store address of var in pointer variable*/

    printf("Address of var variable: %x\n", &var);

/* address stored in pointer variable */
    printf("Address stored in ip variable: %x\n", ip); //%x to find the address

/* access the value using the pointer */
    printf("Value of *ip variable: %d\n", *ip); //
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

>> Arrays/Strings

NULL Terminator, \0 **

    char name[256];
    name = "Someone Else";

[We can change a value in the array by redefining it] :     name[2] = 'z';

[How to change whole value?] :      strcpy(variable that is changing, what you want new value to be) --> strcpy(name, Text Case One);

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

>> Headers/Preprocessor Directive

Constant Variables?     #define EXAMPLE "50" << Needs to be capital, add value
How to use?     In main add it like any other variable      printf("Value is %d \n", EXAMPLE); 

***************************************************************************************************
