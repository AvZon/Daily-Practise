••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••

Pass by Reference: Give me the original copy(address), I edit it, and send it back
Pass by Value: Give me a copy of the address, I edit it, I do whatever I want with it

••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••

>> Pointers

The unary or monadic operator & gives the ``address of a variable''.

The indirection or dereference operator * gives the ``contents of an object pointed to by a pointer''.

To declare a pointer to a variable:

   int *pointer;

••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••

    int  var = 20;   /* actual variable declaration */
    int  *ip;        /* pointer variable declaration */

    ip = &var;  /* store address of var in pointer variable*/

    printf("Address of var variable: %x\n", &var);

/* address stored in pointer variable */
    printf("Address stored in ip variable: %x\n", ip); //%x to find the address

/* access the value using the pointer */
    printf("Value of *ip variable: %d\n", *ip); //

••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••

>> Arrays/Strings

NULL Terminator, \0 **

    char name[256];
    name = "Someone Else";

[We can change a value in the array by redefining it] :     name[2] = 'z';

[How to change whole value?] :      strcpy(variable that is changing, what you want new value to be) --> strcpy(name, Text Case One);

••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••

>> Headers/Preprocessor Directive

Constant Variables?     #define EXAMPLE "50" << Needs to be capital, add value
How to use?     In main add it like any other variable      printf("Value is %d \n", EXAMPLE);

••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••

>> scanf

Use & before every single variable other than arrays

••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••

>> Math

% is the remainder of the number. "number % 7"

••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••

>> Small Ideas

    int a;
    int b;
    int c;
    OR
    int a, b, c;

    a = b = c = 32;

    balance *= 1.13;
    balance = balance * 1.13;

    "==" testing variable
    "&&" and
    "||" or

    ++a //change 'a' before
    a++ //change 'a' after
••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••

>> Typecasting

How to change a variable type temporarily?

    int a = 5;
    int b = 6.4;
    float answer;

    answer = (float)a + (float)b; //changes it JUST for this line

••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••

>> Shorthand If Else

    (test) ? trueCode : falseCode;
    (age >= 20) ? printf("Nice\n") : printf("Sucks\n");

    int friends = 99;

    printf("I have %d friend%s \n", friends, (friends != 1) ? "s" : "");

••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••

>> For Loops

for (when do you want to start, when do you want to end, increment) //go up by more than one? [variable += number (f += 9);]

••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••

>> Break

    if(variable == value) {
        break; //stops loop based on input
    }

••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••

>> Continue

    if(variable == value || variable == value2) {

        value++;
        continue; //if argument is true, stop everything and restart

    }

••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••

>> Switch

    char grade = 'C';

    switch(grade) {
        case 'A' : printf("Nice\n");
                break;
        case 'B' : printf("Decent\n");
                break;
        case 'C' : printf("Not great\n");
                break;
        case 'D' : printf("Word Harder\n");
                break;
        case 'F' : printf("Bad\n");
                break;
        default : printf("That doesn't make sense!")
    }

••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••
